cmake_minimum_required(VERSION 3.26)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -g")

if(WIN32)
   set(CMAKE_C_COMPILER "C:/msys64/mingw64/bin/gcc.exe")
   set(CMAKE_CXX_COMPILER "C:/msys64/mingw64/bin/gcc.exe")
endif()

set(CMAKE_C_OUTPUT_EXTENSION_REPLACE 1)

# Options
option(COVERAGE "Enable code coverage" ON)

# first we can indicate the documentation build as an option and set it to ON by default
option(BUILD_DOC "Build documentation" ON)

if (COVERAGE)
    add_definitions(--coverage)
endif()

#--------------------------------------------------------------------------------------------------#
 
project($COMPONENT) 

#--------------------------------------------------------------------------------------------------#
set (SRCS  
	src/$COMPONENT.c	 
)

include_directories ( 
	inc 
  test/lib/inc
	../../02_Middleware/Base/inc
)  

set (TU_SRCS 
	#test/02_SWE5_Integration_Tests/stubs/TBC.c #Complete with the good stubs
	test/01_SWE4_Units_Tests/src/TU_$COMPONENT.c
	test/lib/src/Test_Report.c
)        
 
if(NOT TARGET Lib_$COMPONENT) 					
add_library(Lib_$COMPONENT STATIC ${SRCS} )  	
endif()     									
   
#--------------------------------------------------------------------------------------------------#
# Ctests enabled
#--------------------------------------------------------------------------------------------------#
enable_testing() 

add_test(
  NAME TU_$COMPONENT
  COMMAND $<TARGET_FILE:TU_$COMPONENT>
)
 
#--------------------------------------------------------------------------------------------------#

add_executable(TU_$COMPONENT ${TU_SRCS} ${SRCS} )   
target_link_libraries(TU_$COMPONENT --coverage)  
set_target_properties(TU_$COMPONENT PROPERTIES EXCLUDE_FROM_ALL TRUE) 


target_include_directories (TU_$COMPONENT PRIVATE
	#../../01_HighLevel/Service_TBC/inc	# OPTIONNAL & Complete with the good name
	#../../02_Middleware/Library_TBC/inc # OPTIONNAL & with the good name
	#../../03_Driver/Driver_TBC/inc 		# OPTIONNAL & with the good name
	test/01_SWE4_Units_Tests/stubs/inc
	test/01_SWE4_Units_Tests/inc
  test/lib/inc
	inc
)   
 
#--------------------------------------------------------------------------------------------------#

# check if Doxygen is installed
find_package(Doxygen)
if (DOXYGEN_FOUND)

    # set native source dir path to "c:/" instead of "/c/" in Build/Doxyfile.in  
    string(REPLACE "/c/" "c:/" CMAKE_SOURCE_DIR_NATIVE ${CMAKE_SOURCE_DIR})  
    MESSAGE("CMAKE_SOURCE_DIR_NATIVE ${CMAKE_SOURCE_DIR_NATIVE}") 

    # set input and output files
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

    # request to configure the file
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
    message("Doxygen build started")

    # note the option ALL which allows to build the docs together with the application
    add_custom_target( doc_doxygen ALL
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM )
else (DOXYGEN_FOUND)
  message("Doxygen need to be installed to generate the doxygen documentation")
endif (DOXYGEN_FOUND)
